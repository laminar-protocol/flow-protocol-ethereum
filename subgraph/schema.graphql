type SyntheticFlowProtocolEntity @entity {
    id: ID! # 0, singleton

    totalEvents: BigInt!
}

type SyntheticTokenEntity @entity {
    id: ID!                         # Token contract address
    name: String!                   # Name of the token
    symbol: String!                 # Symbol of the token
}

type MarginTokenPairEntity @entity {
    id: ID!                              # Token Pair Id
    base: Bytes!                         # Base token contract address
    quote: Bytes!                        # Quote token contract address
}

enum EventKind {
    Minted
    Redeemed
    Liquidated
    Deposited
    Withdrew
    CollateralAdded
    CollateralWithdrew
}

type EventEntity @entity {
    id: ID!                         # Sequence ID since a tx can have multiple events
    kind: EventKind!                # EventKind enum: Minted, Redeemed, Liquidated, Deposited, Withdrew
                                    #                 CollateralAdded, CollateralWithdrew

    timestamp: Int!                 # Timestamp in seconds
    txhash: Bytes!                  # Transaction hash
    block: Int!                     # Block number that the transaction is recorded

    user: Bytes!                    # Address of sender
    token: SyntheticTokenEntity!    # Synthetic Token Entity
    liquidityPool: Bytes            # Address of liquidity pool

    baseTokenAmount: BigDecimal!    # Base token amount, e.g. 10 DAI
    flowTokenAmount: BigDecimal!    # Flow Token amount, e.g. 9 fEUR
}

type PriceEntity @entity {
    id: ID!                 # Synthetic Asset (Token) Address
    value: BigDecimal!      # Market Price from Price Oracle
    updatedAt: Int!         # Timestamp in seconds
}

type MarginPositionEntity @entity {
    id: ID!                                 # Margin Trading Pair Contract Address + Position ID

    base: Bytes!                            # The Trading Pair Base Token
    quote: Bytes!                           # The Trading Pair Quote Token
    positionId: Int!                        # Position ID is returned upon opening a position

    owner: Bytes!                           # Address of the position owner, who opens this position
    liquidityPool: Bytes!                   # Address of the liquidity pool
    leverage: Int!                          # Leverage number e.g. 50x
    amount: BigDecimal!                     # Amount in DAI for opening the position
    openPrice: BigDecimal!                  # Price when opening this position, accounted for spread

    openTime: Int!                          # Position open timestamp in seconds
    openTxhash: Bytes!                      # Position open transaction hash
    openBlock: Int!                         # Position open block number

    closePrice: BigDecimal                  # Price when closing this position, accounted for spread
    liquidator: Bytes                       # Address of the liquidator who closes this position
    realizedPl: BigDecimal                  # Amount in DAI returns to owner when closing position

    closeTime: Int                          # Position close timestamp in seconds
    closeTxhash: Bytes                      # Position close transaction hash
    closeBlock: Int                         # Position close block number
}
