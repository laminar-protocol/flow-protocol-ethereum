type FlowProtocolEntity @entity {
    id: ID! # 0, singleton

    totalEvents: BigInt!
}

type TokenEntity @entity {
    id: ID!                         # Token contract address
    name: String!                   # Name of the token
    symbol: String!                 # Symbol of the token
}

enum EventKind {
    Minted
    Redeemed
    Liquidated
    Deposited
    Withdrew
    CollateralAdded
    CollateralWithdrew
}

type EventEntity @entity {
    id: ID!                         # Sequence ID since a tx can have multiple events
    kind: EventKind!                # EventKind enum: Minted, Redeemed, Liquidated, Deposited, Withdrew
                                    #                 CollateralAdded, CollateralWithdrew

    timestamp: Int!                 # Timestamp in seconds
    txhash: Bytes!                  # Transaction hash
    block: Int!                     # Block number that the transaction is recorded

    user: Bytes!                    # Address of sender
    token: TokenEntity!             # Token Entity
    liquidityPool: Bytes            # Address of liquidity pool

    baseTokenAmount: BigDecimal!    # Base token amount, e.g. 10 DAI
    flowTokenAmount: BigDecimal!    # Flow Token amount, e.g. 9 fEUR
}

type PriceEntity @entity {
    id: ID!                 # Synthetic Asset (Token) Address
    value: BigDecimal!      # Market Price from Price Oracle
    updatedAt: Int!         # Timestamp in seconds
}

type TradingPairEntity @entity {
    id: ID!                         # Margin Trading Pair Contract Address

    quoteToken: TokenEntity!        # Asset in trade, e.g. Forex fToken fEUR, or any other assets
    leverage: Int!                  # The leverage, positive is long, negative is short
    safeMarginPercent: BigDecimal!  # Max amount to lose before liquidity pool can close position voluntariy
    liquidationFee: BigDecimal!     # The reward both trader and liquidity pool chip in for liquidators
}

type MarginPositionEntity @entity {
    id: ID!                                 # Margin Trading Pair Contract Address + Position ID

    pair: TradingPairEntity!                # The Trading Pair Entity
    positionId: Int!                        # Position ID is returned upon opening a position

    owner: Bytes!                           # Address of the position owner, who opens this position
    liquidityPool: Bytes!                   # Address of the liquidity pool
    amount: BigDecimal!                     # Amount in DAI for opening the position, including liquidity fee
    openPrice: BigDecimal!                  # Price when opening this position, accounted for spread
    bidSpread: BigDecimal!
    liquidationFee: BigDecimal!             # The reward both trader and liquidity pool chip in for liquidators

    openTime: Int!                          # Position open timestamp in seconds
    openTxhash: Bytes!                      # Position open transaction hash
    openBlock: Int!                         # Position open block number

    closePrice: BigDecimal                  # Price when closing this position, accounted for spread
    liquidator: Bytes                       # Address of the liquidator who closes this position
    closeOwnerAmount: BigDecimal            # Amount in DAI returns to owner when closing position
    closeLiquidityPoolAmount: BigDecimal    # Amount in DAI returns to liquidity pool when closing position

    closeTime: Int                          # Position close timestamp in seconds
    closeTxhash: Bytes                      # Position close transaction hash
    closeBlock: Int                         # Position close block number
}
