// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class FlowProtocolEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FlowProtocolEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FlowProtocolEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FlowProtocolEntity", id.toString(), this);
  }

  static load(id: string): FlowProtocolEntity | null {
    return store.get("FlowProtocolEntity", id) as FlowProtocolEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalEvents(): BigInt {
    let value = this.get("totalEvents");
    return value.toBigInt();
  }

  set totalEvents(value: BigInt) {
    this.set("totalEvents", Value.fromBigInt(value));
  }
}

export class TokenEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenEntity", id.toString(), this);
  }

  static load(id: string): TokenEntity | null {
    return store.get("TokenEntity", id) as TokenEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }
}

export class EventEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EventEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EventEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EventEntity", id.toString(), this);
  }

  static load(id: string): EventEntity | null {
    return store.get("EventEntity", id) as EventEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get kind(): string {
    let value = this.get("kind");
    return value.toString();
  }

  set kind(value: string) {
    this.set("kind", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get txhash(): Bytes {
    let value = this.get("txhash");
    return value.toBytes();
  }

  set txhash(value: Bytes) {
    this.set("txhash", Value.fromBytes(value));
  }

  get block(): i32 {
    let value = this.get("block");
    return value.toI32();
  }

  set block(value: i32) {
    this.set("block", Value.fromI32(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get baseTokenAmount(): BigDecimal {
    let value = this.get("baseTokenAmount");
    return value.toBigDecimal();
  }

  set baseTokenAmount(value: BigDecimal) {
    this.set("baseTokenAmount", Value.fromBigDecimal(value));
  }

  get flowTokenAmount(): BigDecimal {
    let value = this.get("flowTokenAmount");
    return value.toBigDecimal();
  }

  set flowTokenAmount(value: BigDecimal) {
    this.set("flowTokenAmount", Value.fromBigDecimal(value));
  }
}

export class PriceEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PriceEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PriceEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PriceEntity", id.toString(), this);
  }

  static load(id: string): PriceEntity | null {
    return store.get("PriceEntity", id) as PriceEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    return value.toI32();
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }
}
