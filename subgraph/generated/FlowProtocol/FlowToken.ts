// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Approval extends EthereumEvent {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends EthereumEvent {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FlowToken__liquidityPoolPositionsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class FlowToken__getPositionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class FlowToken extends SmartContract {
  static bind(address: Address): FlowToken {
    return new FlowToken("FlowToken", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call("allowance", [
      EthereumValue.fromAddress(owner),
      EthereumValue.fromAddress(spender)
    ]);

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): CallResult<BigInt> {
    let result = super.tryCall("allowance", [
      EthereumValue.fromAddress(owner),
      EthereumValue.fromAddress(spender)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): CallResult<boolean> {
    let result = super.tryCall("approve", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", [EthereumValue.fromAddress(account)]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): CallResult<BigInt> {
    let result = super.tryCall("balanceOf", [
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", []);

    return result[0].toI32();
  }

  try_decimals(): CallResult<i32> {
    let result = super.tryCall("decimals", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call("decreaseAllowance", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(subtractedValue)
    ]);

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("decreaseAllowance", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(subtractedValue)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  defaultCollateralRatio(): BigInt {
    let result = super.call("defaultCollateralRatio", []);

    return result[0].toBigInt();
  }

  try_defaultCollateralRatio(): CallResult<BigInt> {
    let result = super.tryCall("defaultCollateralRatio", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  deposits(param0: Address): BigInt {
    let result = super.call("deposits", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_deposits(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("deposits", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  extremeCollateralRatio(): BigInt {
    let result = super.call("extremeCollateralRatio", []);

    return result[0].toBigInt();
  }

  try_extremeCollateralRatio(): CallResult<BigInt> {
    let result = super.tryCall("extremeCollateralRatio", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call("increaseAllowance", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(addedValue)
    ]);

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("increaseAllowance", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(addedValue)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  interestDebits(param0: Address): BigInt {
    let result = super.call("interestDebits", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_interestDebits(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("interestDebits", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  interestShares(param0: Address): BigInt {
    let result = super.call("interestShares", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_interestShares(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("interestShares", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isProtocol(): boolean {
    let result = super.call("isProtocol", []);

    return result[0].toBoolean();
  }

  try_isProtocol(): CallResult<boolean> {
    let result = super.tryCall("isProtocol", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  liquidationCollateralRatio(): BigInt {
    let result = super.call("liquidationCollateralRatio", []);

    return result[0].toBigInt();
  }

  try_liquidationCollateralRatio(): CallResult<BigInt> {
    let result = super.tryCall("liquidationCollateralRatio", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  liquidityPoolPositions(
    param0: Address
  ): FlowToken__liquidityPoolPositionsResult {
    let result = super.call("liquidityPoolPositions", [
      EthereumValue.fromAddress(param0)
    ]);

    return new FlowToken__liquidityPoolPositionsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_liquidityPoolPositions(
    param0: Address
  ): CallResult<FlowToken__liquidityPoolPositionsResult> {
    let result = super.tryCall("liquidityPoolPositions", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new FlowToken__liquidityPoolPositionsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  name(): string {
    let result = super.call("name", []);

    return result[0].toString();
  }

  try_name(): CallResult<string> {
    let result = super.tryCall("name", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  protocol(): Address {
    let result = super.call("protocol", []);

    return result[0].toAddress();
  }

  try_protocol(): CallResult<Address> {
    let result = super.tryCall("protocol", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", []);

    return result[0].toString();
  }

  try_symbol(): CallResult<string> {
    let result = super.tryCall("symbol", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  totalInterestDebits(): BigInt {
    let result = super.call("totalInterestDebits", []);

    return result[0].toBigInt();
  }

  try_totalInterestDebits(): CallResult<BigInt> {
    let result = super.tryCall("totalInterestDebits", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  totalInterestShares(): BigInt {
    let result = super.call("totalInterestShares", []);

    return result[0].toBigInt();
  }

  try_totalInterestShares(): CallResult<BigInt> {
    let result = super.tryCall("totalInterestShares", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  totalPrincipalAmount(): BigInt {
    let result = super.call("totalPrincipalAmount", []);

    return result[0].toBigInt();
  }

  try_totalPrincipalAmount(): CallResult<BigInt> {
    let result = super.tryCall("totalPrincipalAmount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): CallResult<BigInt> {
    let result = super.tryCall("totalSupply", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", [
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(recipient: Address, amount: BigInt): CallResult<boolean> {
    let result = super.tryCall("transfer", [
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call("transferFrom", [
      EthereumValue.fromAddress(sender),
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("transferFrom", [
      EthereumValue.fromAddress(sender),
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  incentiveRatio(currentRatio: BigInt): BigInt {
    let result = super.call("incentiveRatio", [
      EthereumValue.fromUnsignedBigInt(currentRatio)
    ]);

    return result[0].toBigInt();
  }

  try_incentiveRatio(currentRatio: BigInt): CallResult<BigInt> {
    let result = super.tryCall("incentiveRatio", [
      EthereumValue.fromUnsignedBigInt(currentRatio)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getPosition(poolAddr: Address): FlowToken__getPositionResult {
    let result = super.call("getPosition", [
      EthereumValue.fromAddress(poolAddr)
    ]);

    return new FlowToken__getPositionResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getPosition(poolAddr: Address): CallResult<FlowToken__getPositionResult> {
    let result = super.tryCall("getPosition", [
      EthereumValue.fromAddress(poolAddr)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new FlowToken__getPositionResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  removePosition(
    poolAddr: Address,
    collateralsToRemove: BigInt,
    mintedToRemove: BigInt
  ): BigInt {
    let result = super.call("removePosition", [
      EthereumValue.fromAddress(poolAddr),
      EthereumValue.fromUnsignedBigInt(collateralsToRemove),
      EthereumValue.fromUnsignedBigInt(mintedToRemove)
    ]);

    return result[0].toBigInt();
  }

  try_removePosition(
    poolAddr: Address,
    collateralsToRemove: BigInt,
    mintedToRemove: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("removePosition", [
      EthereumValue.fromAddress(poolAddr),
      EthereumValue.fromUnsignedBigInt(collateralsToRemove),
      EthereumValue.fromUnsignedBigInt(mintedToRemove)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  interestShareExchangeRate(): BigInt {
    let result = super.call("interestShareExchangeRate", []);

    return result[0].toBigInt();
  }

  try_interestShareExchangeRate(): CallResult<BigInt> {
    let result = super.tryCall("interestShareExchangeRate", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  deposit(sender: Address, amount: BigInt, price: BigInt): BigInt {
    let result = super.call("deposit", [
      EthereumValue.fromAddress(sender),
      EthereumValue.fromUnsignedBigInt(amount),
      EthereumValue.fromUnsignedBigInt(price)
    ]);

    return result[0].toBigInt();
  }

  try_deposit(
    sender: Address,
    amount: BigInt,
    price: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("deposit", [
      EthereumValue.fromAddress(sender),
      EthereumValue.fromUnsignedBigInt(amount),
      EthereumValue.fromUnsignedBigInt(price)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(sender: Address, amount: BigInt): BigInt {
    let result = super.call("withdraw", [
      EthereumValue.fromAddress(sender),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_withdraw(sender: Address, amount: BigInt): CallResult<BigInt> {
    let result = super.tryCall("withdraw", [
      EthereumValue.fromAddress(sender),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get moneyMarket_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get protocol(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends EthereumCall {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends EthereumCall {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends EthereumCall {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCall extends EthereumCall {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends EthereumCall {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetLiquidationCollateralRatioCall extends EthereumCall {
  get inputs(): SetLiquidationCollateralRatioCall__Inputs {
    return new SetLiquidationCollateralRatioCall__Inputs(this);
  }

  get outputs(): SetLiquidationCollateralRatioCall__Outputs {
    return new SetLiquidationCollateralRatioCall__Outputs(this);
  }
}

export class SetLiquidationCollateralRatioCall__Inputs {
  _call: SetLiquidationCollateralRatioCall;

  constructor(call: SetLiquidationCollateralRatioCall) {
    this._call = call;
  }

  get percent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLiquidationCollateralRatioCall__Outputs {
  _call: SetLiquidationCollateralRatioCall;

  constructor(call: SetLiquidationCollateralRatioCall) {
    this._call = call;
  }
}

export class SetExtremeCollateralRatioCall extends EthereumCall {
  get inputs(): SetExtremeCollateralRatioCall__Inputs {
    return new SetExtremeCollateralRatioCall__Inputs(this);
  }

  get outputs(): SetExtremeCollateralRatioCall__Outputs {
    return new SetExtremeCollateralRatioCall__Outputs(this);
  }
}

export class SetExtremeCollateralRatioCall__Inputs {
  _call: SetExtremeCollateralRatioCall;

  constructor(call: SetExtremeCollateralRatioCall) {
    this._call = call;
  }

  get percent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetExtremeCollateralRatioCall__Outputs {
  _call: SetExtremeCollateralRatioCall;

  constructor(call: SetExtremeCollateralRatioCall) {
    this._call = call;
  }
}

export class SetDefaultCollateralRatioCall extends EthereumCall {
  get inputs(): SetDefaultCollateralRatioCall__Inputs {
    return new SetDefaultCollateralRatioCall__Inputs(this);
  }

  get outputs(): SetDefaultCollateralRatioCall__Outputs {
    return new SetDefaultCollateralRatioCall__Outputs(this);
  }
}

export class SetDefaultCollateralRatioCall__Inputs {
  _call: SetDefaultCollateralRatioCall;

  constructor(call: SetDefaultCollateralRatioCall) {
    this._call = call;
  }

  get percent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDefaultCollateralRatioCall__Outputs {
  _call: SetDefaultCollateralRatioCall;

  constructor(call: SetDefaultCollateralRatioCall) {
    this._call = call;
  }
}

export class MintCall extends EthereumCall {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class BurnCall extends EthereumCall {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class AddPositionCall extends EthereumCall {
  get inputs(): AddPositionCall__Inputs {
    return new AddPositionCall__Inputs(this);
  }

  get outputs(): AddPositionCall__Outputs {
    return new AddPositionCall__Outputs(this);
  }
}

export class AddPositionCall__Inputs {
  _call: AddPositionCall;

  constructor(call: AddPositionCall) {
    this._call = call;
  }

  get poolAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get additonalCollaterals(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get additionaMinted(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get liquidityPoolShares(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddPositionCall__Outputs {
  _call: AddPositionCall;

  constructor(call: AddPositionCall) {
    this._call = call;
  }
}

export class RemovePositionCall extends EthereumCall {
  get inputs(): RemovePositionCall__Inputs {
    return new RemovePositionCall__Inputs(this);
  }

  get outputs(): RemovePositionCall__Outputs {
    return new RemovePositionCall__Outputs(this);
  }
}

export class RemovePositionCall__Inputs {
  _call: RemovePositionCall;

  constructor(call: RemovePositionCall) {
    this._call = call;
  }

  get poolAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get collateralsToRemove(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get mintedToRemove(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RemovePositionCall__Outputs {
  _call: RemovePositionCall;

  constructor(call: RemovePositionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawToCall extends EthereumCall {
  get inputs(): WithdrawToCall__Inputs {
    return new WithdrawToCall__Inputs(this);
  }

  get outputs(): WithdrawToCall__Outputs {
    return new WithdrawToCall__Outputs(this);
  }
}

export class WithdrawToCall__Inputs {
  _call: WithdrawToCall;

  constructor(call: WithdrawToCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get baseTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawToCall__Outputs {
  _call: WithdrawToCall;

  constructor(call: WithdrawToCall) {
    this._call = call;
  }
}

export class DepositCall extends EthereumCall {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawCall extends EthereumCall {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
