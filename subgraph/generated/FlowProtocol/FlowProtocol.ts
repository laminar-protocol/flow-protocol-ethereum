// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class CollateralAdded extends EthereumEvent {
  get params(): CollateralAdded__Params {
    return new CollateralAdded__Params(this);
  }
}

export class CollateralAdded__Params {
  _event: CollateralAdded;

  constructor(event: CollateralAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get liquidityPool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get baseTokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CollateralWithdrew extends EthereumEvent {
  get params(): CollateralWithdrew__Params {
    return new CollateralWithdrew__Params(this);
  }
}

export class CollateralWithdrew__Params {
  _event: CollateralWithdrew;

  constructor(event: CollateralWithdrew) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get liquidityPool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get baseTokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FlowTokenDeposited extends EthereumEvent {
  get params(): FlowTokenDeposited__Params {
    return new FlowTokenDeposited__Params(this);
  }
}

export class FlowTokenDeposited__Params {
  _event: FlowTokenDeposited;

  constructor(event: FlowTokenDeposited) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get flowTokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FlowTokenWithdrew extends EthereumEvent {
  get params(): FlowTokenWithdrew__Params {
    return new FlowTokenWithdrew__Params(this);
  }
}

export class FlowTokenWithdrew__Params {
  _event: FlowTokenWithdrew;

  constructor(event: FlowTokenWithdrew) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get flowTokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Liquidated extends EthereumEvent {
  get params(): Liquidated__Params {
    return new Liquidated__Params(this);
  }
}

export class Liquidated__Params {
  _event: Liquidated;

  constructor(event: Liquidated) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidityPool(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get flowTokenAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Minted extends EthereumEvent {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidityPool(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get baseTokenAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewFlowToken extends EthereumEvent {
  get params(): NewFlowToken__Params {
    return new NewFlowToken__Params(this);
  }
}

export class NewFlowToken__Params {
  _event: NewFlowToken;

  constructor(event: NewFlowToken) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends EthereumEvent {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redeemed extends EthereumEvent {
  get params(): Redeemed__Params {
    return new Redeemed__Params(this);
  }
}

export class Redeemed__Params {
  _event: Redeemed;

  constructor(event: Redeemed) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidityPool(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get flowTokenAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FlowProtocol extends SmartContract {
  static bind(address: Address): FlowProtocol {
    return new FlowProtocol("FlowProtocol", address);
  }

  isOwner(): boolean {
    let result = super.call("isOwner", []);

    return result[0].toBoolean();
  }

  try_isOwner(): CallResult<boolean> {
    let result = super.tryCall("isOwner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  maxSpread(): BigInt {
    let result = super.call("maxSpread", []);

    return result[0].toBigInt();
  }

  try_maxSpread(): CallResult<BigInt> {
    let result = super.tryCall("maxSpread", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  moneyMarket(): Address {
    let result = super.call("moneyMarket", []);

    return result[0].toAddress();
  }

  try_moneyMarket(): CallResult<Address> {
    let result = super.tryCall("moneyMarket", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  oracle(): Address {
    let result = super.call("oracle", []);

    return result[0].toAddress();
  }

  try_oracle(): CallResult<Address> {
    let result = super.tryCall("oracle", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  tokenWhitelist(param0: Address): boolean {
    let result = super.call("tokenWhitelist", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_tokenWhitelist(param0: Address): CallResult<boolean> {
    let result = super.tryCall("tokenWhitelist", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  tokens(param0: string): Address {
    let result = super.call("tokens", [EthereumValue.fromString(param0)]);

    return result[0].toAddress();
  }

  try_tokens(param0: string): CallResult<Address> {
    let result = super.tryCall("tokens", [EthereumValue.fromString(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  mint(token: Address, pool: Address, baseTokenAmount: BigInt): BigInt {
    let result = super.call("mint", [
      EthereumValue.fromAddress(token),
      EthereumValue.fromAddress(pool),
      EthereumValue.fromUnsignedBigInt(baseTokenAmount)
    ]);

    return result[0].toBigInt();
  }

  try_mint(
    token: Address,
    pool: Address,
    baseTokenAmount: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("mint", [
      EthereumValue.fromAddress(token),
      EthereumValue.fromAddress(pool),
      EthereumValue.fromUnsignedBigInt(baseTokenAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  redeem(token: Address, pool: Address, flowTokenAmount: BigInt): BigInt {
    let result = super.call("redeem", [
      EthereumValue.fromAddress(token),
      EthereumValue.fromAddress(pool),
      EthereumValue.fromUnsignedBigInt(flowTokenAmount)
    ]);

    return result[0].toBigInt();
  }

  try_redeem(
    token: Address,
    pool: Address,
    flowTokenAmount: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("redeem", [
      EthereumValue.fromAddress(token),
      EthereumValue.fromAddress(pool),
      EthereumValue.fromUnsignedBigInt(flowTokenAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  liquidate(token: Address, pool: Address, flowTokenAmount: BigInt): BigInt {
    let result = super.call("liquidate", [
      EthereumValue.fromAddress(token),
      EthereumValue.fromAddress(pool),
      EthereumValue.fromUnsignedBigInt(flowTokenAmount)
    ]);

    return result[0].toBigInt();
  }

  try_liquidate(
    token: Address,
    pool: Address,
    flowTokenAmount: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("liquidate", [
      EthereumValue.fromAddress(token),
      EthereumValue.fromAddress(pool),
      EthereumValue.fromUnsignedBigInt(flowTokenAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  withdrawCollateral(token: Address): BigInt {
    let result = super.call("withdrawCollateral", [
      EthereumValue.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_withdrawCollateral(token: Address): CallResult<BigInt> {
    let result = super.tryCall("withdrawCollateral", [
      EthereumValue.fromAddress(token)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get oracle_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get moneyMarket_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends EthereumCall {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetMaxSpreadCall extends EthereumCall {
  get inputs(): SetMaxSpreadCall__Inputs {
    return new SetMaxSpreadCall__Inputs(this);
  }

  get outputs(): SetMaxSpreadCall__Outputs {
    return new SetMaxSpreadCall__Outputs(this);
  }
}

export class SetMaxSpreadCall__Inputs {
  _call: SetMaxSpreadCall;

  constructor(call: SetMaxSpreadCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxSpreadCall__Outputs {
  _call: SetMaxSpreadCall;

  constructor(call: SetMaxSpreadCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class AddFlowTokenCall extends EthereumCall {
  get inputs(): AddFlowTokenCall__Inputs {
    return new AddFlowTokenCall__Inputs(this);
  }

  get outputs(): AddFlowTokenCall__Outputs {
    return new AddFlowTokenCall__Outputs(this);
  }
}

export class AddFlowTokenCall__Inputs {
  _call: AddFlowTokenCall;

  constructor(call: AddFlowTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddFlowTokenCall__Outputs {
  _call: AddFlowTokenCall;

  constructor(call: AddFlowTokenCall) {
    this._call = call;
  }
}

export class MintCall extends EthereumCall {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get pool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get baseTokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemCall extends EthereumCall {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get pool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get flowTokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateCall extends EthereumCall {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get pool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get flowTokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddCollateralCall extends EthereumCall {
  get inputs(): AddCollateralCall__Inputs {
    return new AddCollateralCall__Inputs(this);
  }

  get outputs(): AddCollateralCall__Outputs {
    return new AddCollateralCall__Outputs(this);
  }
}

export class AddCollateralCall__Inputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get baseTokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddCollateralCall__Outputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }
}

export class WithdrawCollateralCall extends EthereumCall {
  get inputs(): WithdrawCollateralCall__Inputs {
    return new WithdrawCollateralCall__Inputs(this);
  }

  get outputs(): WithdrawCollateralCall__Outputs {
    return new WithdrawCollateralCall__Outputs(this);
  }
}

export class WithdrawCollateralCall__Inputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawCollateralCall__Outputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositCall extends EthereumCall {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get flowTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class WithdrawCall extends EthereumCall {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get flowTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
